{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[{'id': '25250662', 'visible': None, 'type': 'node', 'pos': [49.1978055, -123.1026634], 'created': {'uid': '135851', 'changeset': '8895101', 'version': '17', 'user': 'z-dude', 'timestamp': '2011-08-01T20:35:13Z'}}, {'id': '25251429', 'visible': None, 'type': 'node', 'pos': [49.1950895, -123.1397932], 'created': {'uid': '1855067', 'changeset': '20096615', 'version': '13', 'user': 'Drdul', 'timestamp': '2014-01-20T02:17:23Z'}}]\n",
      "{'address': {'housenumber': '6088', 'street': 'South Campus Road'},\n",
      " 'barrier': 'gate',\n",
      " 'bicycle': 'yes',\n",
      " 'created': {'changeset': '20153277',\n",
      "             'timestamp': '2014-01-23T03:19:05Z',\n",
      "             'uid': '1891976',\n",
      "             'user': 'AdamWill',\n",
      "             'version': '3'},\n",
      " 'foot': 'yes',\n",
      " 'id': '263593340',\n",
      " 'pos': [49.249748, -123.2345472],\n",
      " 'type': 'node',\n",
      " 'visible': None}\n",
      "{'address': {'housenumber': '6182', 'street': 'South Campus Road'},\n",
      " 'barrier': 'gate',\n",
      " 'bicycle': 'yes',\n",
      " 'created': {'changeset': '20153277',\n",
      "             'timestamp': '2014-01-23T03:19:05Z',\n",
      "             'uid': '1891976',\n",
      "             'user': 'AdamWill',\n",
      "             'version': '3'},\n",
      " 'foot': 'yes',\n",
      " 'horse': 'yes',\n",
      " 'id': '263593341',\n",
      " 'motorcycle': 'no',\n",
      " 'pos': [49.2507173, -123.2373538],\n",
      " 'type': 'node',\n",
      " 'visible': None}\n",
      "{'address': {'housenumber': '900', 'street': 'Burrard Street'},\n",
      " 'amenity': 'cinema',\n",
      " 'created': {'changeset': '28080317',\n",
      "             'timestamp': '2015-01-12T07:21:50Z',\n",
      "             'uid': '692614',\n",
      "             'user': 'seattlefyi',\n",
      "             'version': '5'},\n",
      " 'id': '428214457',\n",
      " 'name': 'Scotiabank Theatre',\n",
      " 'operator': 'Cineplex',\n",
      " 'pos': [49.2819978, -123.1243463],\n",
      " 'type': 'node',\n",
      " 'visible': None}\n",
      "{'address': {'housenumber': '1010', 'street': 'Commercial Drive'},\n",
      " 'created': {'changeset': '24016283',\n",
      "             'timestamp': '2014-07-08T04:28:29Z',\n",
      "             'uid': '154287',\n",
      "             'user': 'keithonearth',\n",
      "             'version': '3'},\n",
      " 'id': '430833988',\n",
      " 'name': 'Dream Cycle',\n",
      " 'pos': [49.2755281, -123.0692994],\n",
      " 'shop': 'bicycle',\n",
      " 'type': 'node',\n",
      " 'visible': None}\n",
      "{'address': {'housenumber': '125', 'street': 'Davie Street'},\n",
      " 'created': {'changeset': '20153277',\n",
      "             'timestamp': '2014-01-23T03:19:16Z',\n",
      "             'uid': '1891976',\n",
      "             'user': 'AdamWill',\n",
      "             'version': '5'},\n",
      " 'id': '502425631',\n",
      " 'name': 'Starbucks Coffee',\n",
      " 'pos': [49.2733132, -123.11993],\n",
      " 'type': 'node',\n",
      " 'visible': None}\n",
      "{'address': {'housenumber': '1906', 'street': 'Haro Street'},\n",
      " 'created': {'changeset': '31503162',\n",
      "             'timestamp': '2015-05-27T13:39:22Z',\n",
      "             'uid': '1183974',\n",
      "             'user': 'myxor',\n",
      "             'version': '2'},\n",
      " 'id': '505674035',\n",
      " 'name': 'The Buchan Hotel',\n",
      " 'phone': '+ 1-800-668-6654',\n",
      " 'pos': [49.2918779, -123.1382861],\n",
      " 'smoking': 'no',\n",
      " 'tourism': 'hotel',\n",
      " 'type': 'node',\n",
      " 'visible': None,\n",
      " 'website': 'http://www.buchanhotel.com/'}\n",
      "{'address': {'city': 'Vancouver',\n",
      "             'housenumber': '375',\n",
      "             'street': 'Water Street'},\n",
      " 'amenity': 'restaurant',\n",
      " 'created': {'changeset': '26757833',\n",
      "             'timestamp': '2014-11-13T15:01:17Z',\n",
      "             'uid': '12859',\n",
      "             'user': 'pbryan',\n",
      "             'version': '6'},\n",
      " 'id': '505751513',\n",
      " 'microbrewery': 'yes',\n",
      " 'name': 'Steamworks',\n",
      " 'phone': '+1 604 689 2739',\n",
      " 'pos': [49.2848448, -123.1105906],\n",
      " 'type': 'node',\n",
      " 'visible': None,\n",
      " 'website': 'http://www.steamworks.com/'}\n",
      "{'address': {'housenumber': '157', 'street': 'Alexander Street'},\n",
      " 'amenity': 'pub',\n",
      " 'created': {'changeset': '9770686',\n",
      "             'timestamp': '2011-11-08T05:16:45Z',\n",
      "             'uid': '147559',\n",
      "             'user': 'jharvey',\n",
      "             'version': '3'},\n",
      " 'id': '563321283',\n",
      " 'name': 'Alibi Room',\n",
      " 'pos': [49.2842068, -123.1002041],\n",
      " 'type': 'node',\n",
      " 'visible': None,\n",
      " 'website': 'http://www.alibi.ca/'}\n",
      "{'address': {'housenumber': '457',\n",
      "             'postcode': 'V5Y 1R4',\n",
      "             'street': 'West Broadway'},\n",
      " 'amenity': 'restaurant',\n",
      " 'created': {'changeset': '26984530',\n",
      "             'timestamp': '2014-11-23T22:51:29Z',\n",
      "             'uid': '1408522',\n",
      "             'user': 'Omnific',\n",
      "             'version': '6'},\n",
      " 'cuisine': 'japanese',\n",
      " 'id': '567129443',\n",
      " 'name': 'Ji Sushi',\n",
      " 'pos': [49.2633391, -123.11437],\n",
      " 'type': 'node',\n",
      " 'visible': None}\n",
      "{'address': {'housenumber': '453',\n",
      "             'postcode': 'V5Y 1R4',\n",
      "             'street': 'West Broadway'},\n",
      " 'created': {'changeset': '20153277',\n",
      "             'timestamp': '2014-01-23T03:19:05Z',\n",
      "             'uid': '1891976',\n",
      "             'user': 'AdamWill',\n",
      "             'version': '6'},\n",
      " 'id': '567130209',\n",
      " 'pos': [49.263337, -123.1142702],\n",
      " 'type': 'node',\n",
      " 'visible': None}\n"
     ]
    }
   ],
   "source": [
    "\"\"\"Code based on quizzes and exercises from Data Wrangling with MongoDB\"\"\"\n",
    "import xml.etree.cElementTree as ET\n",
    "import pprint\n",
    "import re\n",
    "import codecs\n",
    "import json\n",
    "\n",
    "lower = re.compile(r'^([a-z]|_)*$')\n",
    "lower_colon = re.compile(r'^([a-z]|_)*:([a-z]|_)*$')\n",
    "problemchars = re.compile(r'[=\\+/&<>;\\'\"\\?%#$@\\,\\. \\t\\r\\n]')\n",
    "\n",
    "CREATED = [ \"version\", \"changeset\", \"timestamp\", \"user\", \"uid\"]\n",
    "\n",
    "def shape_element(element):\n",
    "    node = {}\n",
    "    if element.tag == \"node\" or element.tag == \"way\" :\n",
    "        # \n",
    "        # attributes in the CREATED array should be added under a key \"created\":\n",
    "        node['created'] = {}\n",
    "        for e in CREATED:\n",
    "            if e in element.attrib:\n",
    "                created_dict = {}\n",
    "                created_dict[e] = element.attrib[e]\n",
    "                node['created'].update(created_dict)\n",
    "        # attributes for latitude and longitude should be added to a \"pos\" array:\n",
    "        node['pos'] = []\n",
    "        if 'lat' in element.attrib:\n",
    "            node['pos'].append(float(element.attrib['lat']))\n",
    "        else:\n",
    "            node['pos'].append(None)\n",
    "        if 'lon' in element.attrib:\n",
    "            node['pos'].append(float(element.attrib['lon']))\n",
    "        else:\n",
    "            node['pos'].append(None)\n",
    "        # Elements on first level tag:\n",
    "        node['id'] = element.attrib['id']\n",
    "        node['type'] = element.tag\n",
    "        if 'visible' in element.attrib:\n",
    "            node['visible'] = element.attrib['visible']\n",
    "        else:\n",
    "            node['visible'] = None\n",
    "        # Elements on second level tag:\n",
    "        # initialize 'address' dict.\n",
    "        for child in element:\n",
    "            if child.tag == 'tag':\n",
    "                if child.attrib['k'].startswith('addr:'):\n",
    "                   node['address'] = {}\n",
    "        # initialize node refs. list\n",
    "        for child in element:\n",
    "            if child.tag == 'nd':\n",
    "                node['node_refs'] = []\n",
    "        # loop to fill node values\n",
    "        for child in element:\n",
    "            if child.tag == 'tag':\n",
    "                # - if second level tag \"k\" value contains problematic characters, \n",
    "                # it is ignored:\n",
    "                p = problemchars.search(child.attrib['k'])\n",
    "                if not p:\n",
    "                    # - if \"k\" value starts with \"addr:\",\n",
    "                    # it is added to a dictionary \"address\"\n",
    "                    if child.attrib['k'].startswith('addr:'):\n",
    "                        splited_addr = child.attrib['k'].split(':')\n",
    "                        # - if there is a second \":\" that separates the type/direction\n",
    "                        # of a street, then it is ignored\n",
    "                        if len(splited_addr) == 2:\n",
    "                            addr_dict = {}\n",
    "                            addr_dict[splited_addr[1]] = child.attrib['v']\n",
    "                            node['address'].update(addr_dict)\n",
    "                    # - if second level tag \"k\" value does not start with \"addr:\", \n",
    "                    # but contains \":\", process it the same as any other tag.\n",
    "                    else:\n",
    "                        node[child.attrib['k']] = child.attrib['v']\n",
    "            # node references for way:\n",
    "            elif child.tag == 'nd':\n",
    "                node['node_refs'].append(child.attrib['ref'])\n",
    "        #\n",
    "        return node\n",
    "    else:\n",
    "        return None\n",
    "\n",
    "\n",
    "def process_map(file_in):\n",
    "    file_out = \"{0}.json\".format(file_in)\n",
    "    data = []\n",
    "    with codecs.open(file_out, \"w\") as fo:\n",
    "        for _, element in ET.iterparse(file_in):\n",
    "            el = shape_element(element)\n",
    "            if el:\n",
    "                data.append(el)\n",
    "                #fo.write(json.dumps(el) + \",\")\n",
    "        # Using json.dumps to create the json file with the entire data array:\n",
    "        # Ref: http://stackoverflow.com/questions/21525328/python-converting-a-list-of-dictionaries-to-json\n",
    "        fo.write(json.dumps(data))                        \n",
    "    return data\n",
    "\n",
    "def transform():\n",
    "    # \n",
    "    data = process_map('my_vancouver.xml') # This file has the street names corrections performed on 'improve_street_names'\n",
    "    \n",
    "    print data[0:2] # Print two first elements\n",
    "    \n",
    "    ## Print 10 elements with 'address' field\n",
    "    count = 0\n",
    "    for e in data: \n",
    "        if 'address' in e.keys():\n",
    "            pprint.pprint(e)\n",
    "            count += 1\n",
    "        if count == 10:\n",
    "            break\n",
    "            \n",
    "if __name__ == \"__main__\":\n",
    "    transform()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
