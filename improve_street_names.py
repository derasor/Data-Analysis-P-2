{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'3305': set(['Expo Blvd, #3305']),\n",
      " 'Ave': set(['West 3rd Ave', 'West 41st Ave']),\n",
      " 'Blvd': set(['University Blvd']),\n",
      " 'Broughton': set(['Broughton']),\n",
      " 'East': set(['29th Avenue East']),\n",
      " 'Jarvis': set(['Jarvis']),\n",
      " 'Jervis': set(['Jervis']),\n",
      " 'Pender': set(['463 West Pender']),\n",
      " 'Rd.': set(['Boundary Rd.']),\n",
      " 'South': set(['East Kent Avenue South']),\n",
      " 'St': set([' Beatty St', 'Robson St', 'Whitchurch St', 'Yew St']),\n",
      " 'St.': set(['Mainland St.', 'Seymour St.']),\n",
      " 'Terminal': set(['Station Terminal']),\n",
      " 'Vancouver': set(['Howe St. Vancouver', 'W. Hastings St. Vancouver'])}\n",
      "{'3305': set(['Expo Boulevard, #3305']),\n",
      " 'Broughton': set(['Broughton']),\n",
      " 'East': set(['29th Avenue East']),\n",
      " 'Jarvis': set(['Jarvis']),\n",
      " 'Jervis': set(['Jervis']),\n",
      " 'Pender': set(['463 West Pender']),\n",
      " 'South': set(['East Kent Avenue South']),\n",
      " 'Terminal': set(['Station Terminal'])}\n"
     ]
    }
   ],
   "source": [
    "\"\"\"Code based on quizzes and exercises from Data Wrangling with MongoDB\"\"\"\n",
    "import xml.etree.cElementTree as ET\n",
    "from collections import defaultdict\n",
    "import re\n",
    "import pprint\n",
    "\n",
    "OSMFILE = \"vancouver_canada.osm\"\n",
    "MY_XML = \"my_vancouver.xml\"\n",
    "\n",
    "street_type_re = re.compile(r'\\b\\S+\\.?$', re.IGNORECASE) # boundary, non-whitespace, 1 or more reps., period, 0 or 1 rep., end.\n",
    "\n",
    "\n",
    "expected = [\"Street\", \"Avenue\", \"Boulevard\", \"Drive\", \"Court\", \"Place\", \"Square\", \"Lane\", \"Road\", \n",
    "            \"Trail\", \"Parkway\", \"Commons\", \"Alley\", \"Broadway\", \"Crescent\", \"Highway\", \"Mews\", \n",
    "            \"Walk\", \"Way\", \"Mall\", \"Kingsway\"]\n",
    "\n",
    "# 'mapping' only takes into account unexpected street types according to 'audit'\n",
    "mapping = {\"Ave\" : \"Avenue\",\n",
    "           \"Blvd\" : \"Boulevard\",\n",
    "           \"Rd.\" : \"Road\",\n",
    "           \"St\" : \"Street\",\n",
    "           \"St.\" : \"Street\",\n",
    "           \"Vancouver\" : \"\"} # 'Vancouver' is added at the end of the street, which is not needed.\n",
    "\n",
    "\n",
    "def audit_street_type(street_types, street_name):\n",
    "    m = street_type_re.search(street_name)\n",
    "    if m:\n",
    "        street_type = m.group()\n",
    "        if street_type not in expected:\n",
    "            street_types[street_type].add(street_name)\n",
    "\n",
    "\n",
    "def is_street_name(elem):\n",
    "    return (elem.attrib['k'] == \"addr:street\")\n",
    "\n",
    "\n",
    "def audit(osmfile):\n",
    "    osm_file = open(osmfile, \"r\")\n",
    "    street_types = defaultdict(set)\n",
    "    for event, elem in ET.iterparse(osm_file, events=(\"start\",)):\n",
    "\n",
    "        if elem.tag == \"node\" or elem.tag == \"way\":\n",
    "            for tag in elem.iter(\"tag\"):\n",
    "                if is_street_name(tag):\n",
    "                    audit_street_type(street_types, tag.attrib['v'])\n",
    "    \n",
    "    return street_types\n",
    "\n",
    "\n",
    "def update_name(name, mapping):\n",
    "\n",
    "    # Change street types to the appropriate ones\n",
    "    for e in mapping.keys():\n",
    "        e_search = re.search(e,name)\n",
    "        ## Make sure it is an abbreviation, and not part of other word:\n",
    "        # Cast raw-string \n",
    "        # Ref: http://stackoverflow.com/questions/2428117/casting-raw-strings-python\n",
    "        #      http://stackoverflow.com/questions/18707338/print-raw-string-from-variable-not-getting-the-answers/18707543#18707543\n",
    "        part = e.encode('string-escape')+r'[a-z]'\n",
    "        #\n",
    "        part_search = re.search(part,name)\n",
    "        if part_search == None:\n",
    "            ##\n",
    "            if e_search:\n",
    "                name = re.sub(e,mapping[e],name)\n",
    "    return name     \n",
    "\n",
    "\n",
    "def update_osm():\n",
    "    st_types = audit(OSMFILE)\n",
    "    pprint.pprint(dict(st_types))\n",
    "\n",
    "    # Create new XML file with corrections:\n",
    "    # Ref: 19.7.1.4. Modifying an XML File\n",
    "    #      https://docs.python.org/2/library/xml.etree.elementtree.html\n",
    "    tree = ET.parse(OSMFILE)\n",
    "    root = tree.getroot()\n",
    "    \n",
    "    for st_type, ways in st_types.iteritems():\n",
    "        for name in ways:\n",
    "            \n",
    "            better_name = update_name(name, mapping)\n",
    "            #print name, \"=>\", better_name\n",
    "            or child in root:\n",
    "                if child.tag == \"node\" or child.tag == \"way\":\n",
    "                    for tag in child.iter(\"tag\"):\n",
    "                        if is_street_name(tag):\n",
    "                            if tag.attrib['v'] == name:\n",
    "                                #tag.attrib['v'] = better_name\n",
    "                                tag.set('v',better_name)\n",
    "                                    \n",
    "    tree.write(MY_XML)\n",
    "    # Verify changes:\n",
    "    st_types_after = audit(MY_XML)\n",
    "    pprint.pprint(dict(st_types_after))\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    update_osm()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
